include:
  local: siprd/.gitlab-ci.yml

services:
  - postgres:12

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: siprd
  POSTGRES_USER: siprd
  POSTGRES_PASSWORD: supersecure
  POSTGRES_HOST_AUTH_METHOD: md5

lint:
  stage: lint
  image: node:lts-alpine
  script:
    # lint script adapted from https://stackoverflow.com/questions/43318464/gitlab-ci-with-js-linting 
    # Install ESLint in this docker container
    - npm install -g eslint
    # Configure ESLint (will read your .eslintrc file)
    - cd siprd-fe
    - eslint -c .eslintrc.js
    # Run ESLint
    - eslint --ext .js,.vue src
    - if [ $? -eq 0 ] then exit 0 else exit 1 fi

connect:
  stage: build
  image: postgres:12
  script:
  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
  - export PGPASSWORD=supersecure
  - psql -h "postgres" -U "siprd" -d "siprd" -c "SELECT 'OK' AS status;"

sonar-dev:
  image:
    name: sonarsource/sonar-scanner-cli:4.6
  stage: sonar-dev
  script:
    - sonar-scanner -X
      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
      -Dsonar.sources=.
      -Dsonar.host.url=$SONARQUBE_URL
      -Dsonar.login=$SONARQUBE_TOKEN
      -Dsonar.branch.name=$CI_COMMIT_REF_NAME
      -Dsonar.branch.target=master
  except:
    - master
    - staging

sonar-prod:
  image:
    name: sonarsource/sonar-scanner-cli:4.6
  stage: sonar-prod
  script:
    - sonar-scanner -X
      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
      -Dsonar.sources=.
      -Dsonar.host.url=$SONARQUBE_URL
      -Dsonar.login=$SONARQUBE_TOKEN
      -Dsonar.branch.name=$CI_COMMIT_REF_NAME
  only:
    - master
    - staging

# staging-backend:
#   image: docker:git
#   stage: staging
#   tags:
#     - docker
#   environment:
#     name: staging
#   dependencies: []
#   services:
#     - name: docker:dind
#       command: ["dockerd-entrypoint.sh"]
#   variables:
#     DOCKER_HOST: tcp://docker:2375/
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:be-staging || true
#     - docker build --cache-from $CI_REGISTRY_IMAGE/backend:be-staging --tag $CI_REGISTRY_IMAGE:be-staging siprd
#     - docker push $CI_REGISTRY_IMAGE:be-staging
#   when: manual

# staging-frontend:
#   image: docker:git
#   stage: staging
#   tags:
#     - docker
#   environment:
#     name: staging
#   dependencies: []
#   services:
#     - name: docker:dind
#       command: ["dockerd-entrypoint.sh"]
#   variables:
#     DOCKER_HOST: tcp://docker:2375/
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:fe-staging || true
#     - docker build --cache-from $CI_REGISTRY_IMAGE/frontend:fe-staging --tag $CI_REGISTRY_IMAGE:fe-staging siprd
#     - docker push $CI_REGISTRY_IMAGE:fe-staging
#   when: manual
  
#   # production:
#   #   only: production
